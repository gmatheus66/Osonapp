/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package osonapp;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.drive.model.File;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Osonapp {
	private String path;
	private Monitor monitor;

	private static final String APPLICATION_NAME = "osonapp";
	private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
	private static final String TOKENS_DIRECTORY_PATH = "tokens";

	private static final List<String> SCOPES = Arrays.asList(DriveScopes.DRIVE, DriveScopes.DRIVE_METADATA, DriveScopes.DRIVE_APPDATA, DriveScopes.DRIVE_FILE);
	private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

	private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {

		InputStream in = Osonapp.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
		if (in == null) {
			throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
		}
		GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));
		GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
				HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
				.setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
				.setAccessType("offline")
				.build();
		LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
		return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
	}


    public void init() throws IOException, GeneralSecurityException, InterruptedException{
		Scanner sc = new Scanner(System.in);
		File fileMetadata = new File();
		final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();

		Drive service = new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
				.setApplicationName(APPLICATION_NAME)
				.build();

		System.out.println("Bem vindo ao Osonapp");

		System.out.println("Deseja contiuar logado ?");
		System.out.println("1. Sim    2. NÃ£o");
		int decision = sc.nextInt();
		Monitor monitor = new Monitor(service);
		if(decision == 1){
			Boolean folderexist = false;
			while(!folderexist){
				System.out.println("Digite o caminho do arquivo");
				String dir = sc.nextLine();
				monitor.setPath(dir);
				if (!monitor.VerifyExistsFolder()){
					if(dir.length() > 0){
						System.out.println("Diretorio Invalido");
						System.out.println("------------------");
						folderexist = false;
					}
				}
				else{
					folderexist = true;
					monitor.init();
				}
			}

		}
		else if(decision == 2){
			monitor.disconect(new java.io.File("tokens/StoredCredential"), new java.io.File("files.json") ) ;
		}
		sc.close();


    }
    
    public String getPath() {
    	return path;
    }
    public void setPath(String path) {
    	this.path = path;
    }

    public static void main(String[] args) throws IOException, GeneralSecurityException, InterruptedException {
    	Osonapp osonapp = new Osonapp();
    	osonapp.init();
    }
    
    
}
